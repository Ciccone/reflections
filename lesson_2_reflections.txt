What happens when you initialize a repository? Why do you need to do it?

    There needs to be a directory and metadata files created in order to keep
    track of the commit history and which files are being tracked in a certain
    repository. The top folder of the repo contains:
    - A .git subfolder with all the git related revision history of your repo
    - A working tree, or checked out copies of your project files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area allows you to collect your thoughts when determining
    which files to track the changes of for each commit. It allows you to
    add/remove files from a repo for each commit. The working directory refers
    to the directory you were in when you called git init to create the repo.

How can you use the staging area to make sure you have one commit per logical
change?

    Comparing any differences between your files to commit (in the staging area)
    and your previous commits in the repository with 'git diff --staged' allows
    us to verify that we have one commit per logical change. If there are
    several logical changes then we can unstage those files and separate the
    commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    One could branch off from the early commits in the program when
    experimenting with large restructures. One could also make branches
    later in the program (say off of code in production) to experiment
    with new features that will later be merged into the master branch.
    Some example situations in which branching would be helpful:
        - Translations of a project into different languages
        - Making an alternative style or structure to a webpage
        - Adding optional modes for a game, etc.

How do the diagrams help you visualize the branch structure?

    A visual representation of the branches helps us see the linear progression
    of commits and when parallel branches were created. It helps us keep track
    of how similar branches are to the master branch, if certain commits are
    reachable from others, and lets us see the IDs of various commits in the
    entire project.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches combines the content of all of the commits of both
    branches since the time their histories diverged/split. The diagram makes
    it easy to identify the branches, their divergence point, the parents of
    each commit, and the reachability of these commits from other branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Automatic merging saves time and brain-power. Manually merging ensures that
    the functionality of both branches remains when merging and no necessary
    code is eliminated from either branch.
